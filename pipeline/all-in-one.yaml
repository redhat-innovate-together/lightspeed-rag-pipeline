---
# BuildConfig for container build
apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  name: lightspeed-rag-content-build
  namespace: openshift-pipelines
spec:
  output:
    to:
      kind: ImageStreamTag
      name: lightspeed-rag-content:latest
  source:
    type: Binary
  strategy:
    type: Docker
    dockerStrategy:
      dockerfilePath: Containerfile.output
  triggers: []
---
# ServiceAccount with necessary permissions
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pipeline-service-account
  namespace: openshift-pipelines
---
# ClusterRole for pipeline operations
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: pipeline-cluster-role
rules:
  - apiGroups: [""]
    resources:
      [
        "pods",
        "services",
        "endpoints",
        "persistentvolumeclaims",
        "configmaps",
        "secrets",
        "serviceaccounts",
      ]
    verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]
  - apiGroups: ["apps"]
    resources: ["deployments", "replicasets"]
    verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]
  - apiGroups: ["route.openshift.io"]
    resources: ["routes"]
    verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]
  - apiGroups: ["image.openshift.io"]
    resources: ["imagestreams", "imagestreamtags"]
    verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]
  - apiGroups: ["build.openshift.io"]
    resources:
      [
        "builds",
        "builds/log",
        "buildconfigs",
        "buildconfigs/instantiate",
        "buildconfigs/instantiatebinary",
      ]
    verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]
---
# ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: pipeline-cluster-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: pipeline-cluster-role
subjects:
  - kind: ServiceAccount
    name: pipeline-service-account
    namespace: openshift-pipelines
---
# PVC will be created dynamically via PipelineRun template
---
# ImageStream for the output container image
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  name: lightspeed-rag-content
  namespace: openshift-pipelines
spec:
  lookupPolicy:
    local: false
---
# Task: Clone repositories
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: clone-repos
  namespace: openshift-pipelines
spec:
  params:
    - name: git-repos
      type: string
      description: Comma-separated list of git repositories to clone
      default: "https://github.com/redhat-innovate-together/payments-service.git"
  workspaces:
    - name: output
      description: The workspace to store cloned repositories
  steps:
    - name: clone-repos
      image: alpine/git:latest
      script: |
        #!/bin/sh
        set -e

        cd $(workspaces.output.path)

        # Convert comma-separated repos to array and clone each
        IFS=','
        for repo in $(params.git-repos); do
          repo=$(echo "$repo" | xargs)  # trim whitespace
          echo "Cloning repository: $repo"
          git clone "$repo"
        done

        # List cloned repositories
        echo "Cloned repositories:"
        ls -la
---
# Task: Filter markdown files
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: filter-markdown
  namespace: openshift-pipelines
spec:
  workspaces:
    - name: source
      description: The workspace containing cloned repositories
  steps:
    - name: filter-markdown
      image: registry.redhat.io/ubi8/ubi:latest
      script: |
        #!/bin/bash
        set -e

        cd $(workspaces.source.path)

        # Create markdown directory
        mkdir -p markdown

        # Find all markdown files and copy them to markdown directory
        find . -name "*.md" -type f | while read -r file; do
          echo "Found markdown file: $file"
          # Create directory structure in markdown folder
          target_dir="markdown/$(dirname "$file")"
          mkdir -p "$target_dir"
          cp "$file" "$target_dir/"
        done

        echo "Markdown files copied to markdown directory:"
        find markdown -name "*.md" -type f

        # List contents of markdown directory
        echo "Contents of markdown directory:"
        ls -la markdown/
---
# Task: Clone build repository and build container
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-container
  namespace: openshift-pipelines
spec:
  params:
    - name: image-name
      type: string
      description: Name of the image to build
      default: "lightspeed-rag-content"
    - name: image-tag
      type: string
      description: Tag of the image to build
      default: "latest"
  workspaces:
    - name: source
      description: The workspace containing markdown files
  steps:
    - name: clone-build-repo
      image: alpine/git:latest
      script: |
        #!/bin/sh
        set -e

        cd $(workspaces.source.path)

        # Clone the build repository
        echo "Cloning build repository..."
        git clone https://github.com/redhat-innovate-together/lightspeed-rag-pipeline.git build-repo

        # Copy the byok directory contents to current directory
        cp -r build-repo/byok/* .

        # Verify Containerfile.output exists
        if [ ! -f "Containerfile.output" ]; then
          echo "Error: Containerfile.output not found"
          exit 1
        fi

        # Verify markdown directory exists
        if [ ! -d "markdown" ]; then
          echo "Error: markdown directory not found"
          exit 1
        fi

        echo "Build context prepared:"
        ls -la

    - name: build-and-push
      image: registry.redhat.io/openshift4/ose-cli:latest
      script: |
        #!/bin/bash
        set -e

        cd $(workspaces.source.path)

        # Verify required files exist
        if [ ! -f "Containerfile.output" ]; then
          echo "Error: Containerfile.output not found"
          exit 1
        fi

        if [ ! -d "markdown" ]; then
          echo "Error: markdown directory not found"
          exit 1
        fi

        # Create a tar archive of the build context
        echo "Creating build context archive..."
        echo "Current directory contents:"
        ls -la
        echo "Markdown directory contents:"
        ls -la markdown/

        # Create tar with verbose output and exclude problematic directories
        echo "Creating tar archive (this may take a moment)..."
        tar -czf build-context.tar.gz \
          --exclude=build-repo \
          --exclude=lost+found \
          --exclude='.git' \
          Containerfile.output \
          markdown/ \
          generate_embeddings_tool.py \
          README.md 2>/dev/null || true

        echo "Build context archive created:"
        ls -lh build-context.tar.gz

        # Start binary build using OpenShift BuildConfig
        echo "Starting OpenShift binary build..."

        # Start the build and capture the build name
        BUILD_NAME=$(oc start-build lightspeed-rag-content-build \
          --from-archive=build-context.tar.gz \
          --output=name)

        echo "Build started: $BUILD_NAME"

        # Wait for build completion with timeout
        echo "Waiting for build to complete (timeout: 3 minutes)..."
        if oc wait --for=condition=Complete --timeout=180s "$BUILD_NAME" 2>/dev/null; then
          echo "Build completed successfully!"
          BUILD_STATUS="Complete"
        elif oc wait --for=condition=Failed --timeout=30s "$BUILD_NAME" 2>/dev/null; then
          echo "Build failed!"
          BUILD_STATUS="Failed"
        else
          echo "Build status unclear, checking manually..."
          BUILD_STATUS=$(oc get "$BUILD_NAME" -o jsonpath='{.status.phase}')
        fi

        # Show build logs for debugging
        echo "Build logs:"
        oc logs "$BUILD_NAME" --tail=50 || echo "Could not retrieve build logs"

        # Show final build status
        echo "Final build status: $BUILD_STATUS"

        # Exit with error if build failed
        if [ "$BUILD_STATUS" != "Complete" ]; then
          echo "Build did not complete successfully. Status: $BUILD_STATUS"
          exit 1
        fi

        echo "Container image built and pushed successfully to ImageStream!"

        # Show the built image
        oc get imagestream lightspeed-rag-content -o jsonpath='{.status.dockerImageRepository}' || echo "Could not retrieve image repository info"
---
# Pipeline
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: markdown-container-pipeline
  namespace: openshift-pipelines
spec:
  params:
    - name: git-repos
      type: string
      description: Comma-separated list of git repositories to clone
      default: "https://github.com/redhat-innovate-together/payments-service.git"
    - name: image-name
      type: string
      description: Name of the container image to build
      default: "lightspeed-rag-content"
    - name: image-tag
      type: string
      description: Tag of the container image
      default: "latest"
  workspaces:
    - name: shared-data
      description: Shared workspace for pipeline tasks
  tasks:
    - name: clone-repositories
      taskRef:
        name: clone-repos
      params:
        - name: git-repos
          value: $(params.git-repos)
      workspaces:
        - name: output
          workspace: shared-data

    - name: extract-markdown
      taskRef:
        name: filter-markdown
      workspaces:
        - name: source
          workspace: shared-data
      runAfter:
        - clone-repositories

    - name: build-and-publish
      taskRef:
        name: build-container
      params:
        - name: image-name
          value: $(params.image-name)
        - name: image-tag
          value: $(params.image-tag)
      workspaces:
        - name: source
          workspace: shared-data
      runAfter:
        - extract-markdown
---
# PipelineRun
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  generateName: markdown-container-pipeline-run-
  namespace: openshift-pipelines
spec:
  serviceAccountName: pipeline-service-account
  pipelineRef:
    name: markdown-container-pipeline
  params:
    - name: git-repos
      value: "https://github.com/redhat-innovate-together/payments-service.git"
    - name: image-name
      value: "lightspeed-rag-content"
    - name: image-tag
      value: "latest"
  workspaces:
    - name: shared-data
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 5Gi
